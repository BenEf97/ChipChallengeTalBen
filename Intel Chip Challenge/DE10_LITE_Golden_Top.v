
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
	

);



//=======================================================
//  REG/WIRE declarations
//=======================================================

//CarryOver wire from the state machine. Whenever it finishes a cycle, carryOver==1.
wire carryOver;

//Wire for seconds
wire [5:0] SecWire;

//Wire for carryover seconds, forward to minutes.
wire carryOverSec;

//wire for minutes
wire [5:0] MinWire;

//wire for carryover minutes, forward to hours.
wire carryOverMin;

//Wire for hours
wire [4:0] HourWire;


//=======================================================
//  Structural coding
//=======================================================





//State machine, gets the clock frequency, the switches and the buttons. ovflw carries over to Sec Increace.
StateMachine sm(.clk(MAX10_CLK2_50), .resetN(KEY[0]), .enable(SW[0]), .ovflw(carryOver));


//Sec increase, gets the state machine's overflow.
SecIncrease SecIn(.CarryInSec(carryOver),.resetN(KEY[0]), .OutSec(SecWire), .ovflwSec(carryOverSec));

//Min increase
MinIncrease MinIn(.CarryInMin(carryOverSec), .resetN(KEY[0]),.OutMin(MinWire), .ovflwMin(carryOverMin));

//Hour Increase
HourIncrease HourIn(.CarryInHour(carryOverMin),.resetN(KEY[0]), .OutHour(HourWire));

//Display the 7 segment.
HEXDRV HEXDRV0(.switch(SecWire%10),.segments(HEX0));
HEXDRV HEXDRV1(.switch(SecWire/10),.segments(HEX1));
HEXDRV HEXDRV2(.switch(MinWire%10),.segments(HEX2));
HEXDRV HEXDRV3(.switch(MinWire/10),.segments(HEX3));
HEXDRV HEXDRV4(.switch(HourWire%10),.segments(HEX4));
HEXDRV HEXDRV5(.switch(HourWire/10),.segments(HEX5));

//Led turns on when the switch is on, indicates enable.
assign LEDR[0] = SW[0];



endmodule
