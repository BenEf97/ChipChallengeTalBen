module StateMachine(clk,resetN,enable,count,ovflw);
input clk,resetN,enable;
output reg count;
output reg ovflw;

//States defenitions:
localparam IDLE = 0;
localparam CountUp = 1;
localparam OverFlow = 2;

//FPGA clock frequency is 50MHz
localparam Sec_time = 50_000_000;

//Integers for states
reg [2:0] present_state, next_state;

//counter counts to Sec_time.
integer counter;

//Sqeuential block to define the state registers and the counter registers.
always @ (posedge clk or negedge resetN)
	begin 
	
	//asynchronous process, resetN==0
	if (!resetN) begin
		present_state <= IDLE;
		counter <= 0;
	end
	
	//synchronous process, clock rise
	else begin
	present_state <= next_state;
	if (enable)
		counter <= counter + 1;
	end
end


//Combinational block to compute the next state
always @*
	case (present_state)
	
		IDLE: begin
				if (enable) //enable==1
					next_state = CountUp;
				else //enable==0
					next_state = IDLE;
				end
				
		CountUp: begin
				if (enable) //enable==1
					if (count==Sec_time)
						next_state = OverFlow;
					else
						next_state = CountUp;
						
				else //enable==0
					next_state = IDLE;
				end
		OverFlow: begin
					if (enable)
						next_state=CountUp;
					else
						next_state=IDLE;
				end
	endcase	


//assign for overflow, if 	
assign ovflw = (state==OverFlow) ? 1'b1 ; 1'b0;

endmodule