|DE10_LITE_Golden_Top
ADC_CLK_10 => ~NO_FANOUT~
MAX10_CLK1_50 => MAX10_CLK1_50.IN1
MAX10_CLK2_50 => ~NO_FANOUT~
DRAM_ADDR[0] <= <GND>
DRAM_ADDR[1] <= <GND>
DRAM_ADDR[2] <= <GND>
DRAM_ADDR[3] <= <GND>
DRAM_ADDR[4] <= <GND>
DRAM_ADDR[5] <= <GND>
DRAM_ADDR[6] <= <GND>
DRAM_ADDR[7] <= <GND>
DRAM_ADDR[8] <= <GND>
DRAM_ADDR[9] <= <GND>
DRAM_ADDR[10] <= <GND>
DRAM_ADDR[11] <= <GND>
DRAM_ADDR[12] <= <GND>
DRAM_BA[0] <= <GND>
DRAM_BA[1] <= <GND>
DRAM_CAS_N <= <GND>
DRAM_CKE <= <GND>
DRAM_CLK <= <GND>
DRAM_CS_N <= <GND>
DRAM_DQ[0] <> <UNC>
DRAM_DQ[1] <> <UNC>
DRAM_DQ[2] <> <UNC>
DRAM_DQ[3] <> <UNC>
DRAM_DQ[4] <> <UNC>
DRAM_DQ[5] <> <UNC>
DRAM_DQ[6] <> <UNC>
DRAM_DQ[7] <> <UNC>
DRAM_DQ[8] <> <UNC>
DRAM_DQ[9] <> <UNC>
DRAM_DQ[10] <> <UNC>
DRAM_DQ[11] <> <UNC>
DRAM_DQ[12] <> <UNC>
DRAM_DQ[13] <> <UNC>
DRAM_DQ[14] <> <UNC>
DRAM_DQ[15] <> <UNC>
DRAM_LDQM <= <GND>
DRAM_RAS_N <= <GND>
DRAM_UDQM <= <GND>
DRAM_WE_N <= <GND>
HEX0[0] <= HEXDRV:HEXDRV0.segments
HEX0[1] <= HEXDRV:HEXDRV0.segments
HEX0[2] <= HEXDRV:HEXDRV0.segments
HEX0[3] <= HEXDRV:HEXDRV0.segments
HEX0[4] <= HEXDRV:HEXDRV0.segments
HEX0[5] <= HEXDRV:HEXDRV0.segments
HEX0[6] <= HEXDRV:HEXDRV0.segments
HEX0[7] <= HEXDRV:HEXDRV0.segments
HEX1[0] <= HEXDRV:HEXDRV1.segments
HEX1[1] <= HEXDRV:HEXDRV1.segments
HEX1[2] <= HEXDRV:HEXDRV1.segments
HEX1[3] <= HEXDRV:HEXDRV1.segments
HEX1[4] <= HEXDRV:HEXDRV1.segments
HEX1[5] <= HEXDRV:HEXDRV1.segments
HEX1[6] <= HEXDRV:HEXDRV1.segments
HEX1[7] <= HEXDRV:HEXDRV1.segments
HEX2[0] <= HEXDRV:HEXDRV2.segments
HEX2[1] <= HEXDRV:HEXDRV2.segments
HEX2[2] <= HEXDRV:HEXDRV2.segments
HEX2[3] <= HEXDRV:HEXDRV2.segments
HEX2[4] <= HEXDRV:HEXDRV2.segments
HEX2[5] <= HEXDRV:HEXDRV2.segments
HEX2[6] <= HEXDRV:HEXDRV2.segments
HEX2[7] <= HEXDRV:HEXDRV2.segments
HEX3[0] <= HEXDRV:HEXDRV3.segments
HEX3[1] <= HEXDRV:HEXDRV3.segments
HEX3[2] <= HEXDRV:HEXDRV3.segments
HEX3[3] <= HEXDRV:HEXDRV3.segments
HEX3[4] <= HEXDRV:HEXDRV3.segments
HEX3[5] <= HEXDRV:HEXDRV3.segments
HEX3[6] <= HEXDRV:HEXDRV3.segments
HEX3[7] <= HEXDRV:HEXDRV3.segments
HEX4[0] <= HEXDRV:HEXDRV4.segments
HEX4[1] <= HEXDRV:HEXDRV4.segments
HEX4[2] <= HEXDRV:HEXDRV4.segments
HEX4[3] <= HEXDRV:HEXDRV4.segments
HEX4[4] <= HEXDRV:HEXDRV4.segments
HEX4[5] <= HEXDRV:HEXDRV4.segments
HEX4[6] <= HEXDRV:HEXDRV4.segments
HEX4[7] <= HEXDRV:HEXDRV4.segments
HEX5[0] <= HEXDRV:HEXDRV5.segments
HEX5[1] <= HEXDRV:HEXDRV5.segments
HEX5[2] <= HEXDRV:HEXDRV5.segments
HEX5[3] <= HEXDRV:HEXDRV5.segments
HEX5[4] <= HEXDRV:HEXDRV5.segments
HEX5[5] <= HEXDRV:HEXDRV5.segments
HEX5[6] <= HEXDRV:HEXDRV5.segments
HEX5[7] <= HEXDRV:HEXDRV5.segments
KEY[0] => KEY[0].IN1
KEY[1] => KEY[1].IN1
LEDR[0] <= <GND>
LEDR[1] <= <GND>
LEDR[2] <= <GND>
LEDR[3] <= <GND>
LEDR[4] <= <GND>
LEDR[5] <= <GND>
LEDR[6] <= <GND>
LEDR[7] <= <GND>
LEDR[8] <= <GND>
LEDR[9] <= <GND>
SW[0] => ~NO_FANOUT~
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => ~NO_FANOUT~
VGA_B[0] <= <GND>
VGA_B[1] <= <GND>
VGA_B[2] <= <GND>
VGA_B[3] <= <GND>
VGA_G[0] <= <GND>
VGA_G[1] <= <GND>
VGA_G[2] <= <GND>
VGA_G[3] <= <GND>
VGA_HS <= <GND>
VGA_R[0] <= <GND>
VGA_R[1] <= <GND>
VGA_R[2] <= <GND>
VGA_R[3] <= <GND>
VGA_VS <= <GND>
GSENSOR_CS_N <= <GND>
GSENSOR_INT[1] => ~NO_FANOUT~
GSENSOR_INT[2] => ~NO_FANOUT~
GSENSOR_SCLK <= <GND>
GSENSOR_SDI <> <UNC>
GSENSOR_SDO <> <UNC>
ARDUINO_IO[0] <> <UNC>
ARDUINO_IO[1] <> <UNC>
ARDUINO_IO[2] <> <UNC>
ARDUINO_IO[3] <> <UNC>
ARDUINO_IO[4] <> <UNC>
ARDUINO_IO[5] <> <UNC>
ARDUINO_IO[6] <> <UNC>
ARDUINO_IO[7] <> <UNC>
ARDUINO_IO[8] <> <UNC>
ARDUINO_IO[9] <> <UNC>
ARDUINO_IO[10] <> <UNC>
ARDUINO_IO[11] <> <UNC>
ARDUINO_IO[12] <> <UNC>
ARDUINO_IO[13] <> <UNC>
ARDUINO_IO[14] <> <UNC>
ARDUINO_IO[15] <> <UNC>
ARDUINO_RESET_N <> <UNC>
GPIO[0] <> <UNC>
GPIO[1] <> <UNC>
GPIO[2] <> <UNC>
GPIO[3] <> <UNC>
GPIO[4] <> <UNC>
GPIO[5] <> <UNC>
GPIO[6] <> <UNC>
GPIO[7] <> <UNC>
GPIO[8] <> <UNC>
GPIO[9] <> <UNC>
GPIO[10] <> <UNC>
GPIO[11] <> <UNC>
GPIO[12] <> <UNC>
GPIO[13] <> <UNC>
GPIO[14] <> <UNC>
GPIO[15] <> <UNC>
GPIO[16] <> <UNC>
GPIO[17] <> <UNC>
GPIO[18] <> <UNC>
GPIO[19] <> <UNC>
GPIO[20] <> <UNC>
GPIO[21] <> <UNC>
GPIO[22] <> <UNC>
GPIO[23] <> <UNC>
GPIO[24] <> <UNC>
GPIO[25] <> <UNC>
GPIO[26] <> <UNC>
GPIO[27] <> <UNC>
GPIO[28] <> <UNC>
GPIO[29] <> <UNC>
GPIO[30] <> <UNC>
GPIO[31] <> <UNC>
GPIO[32] <> <UNC>
GPIO[33] <> <UNC>
GPIO[34] <> <UNC>
GPIO[35] <> <UNC>


|DE10_LITE_Golden_Top|ClockProject:Clock
clk => present_counter[0].CLK
clk => present_counter[1].CLK
clk => present_counter[2].CLK
clk => present_counter[3].CLK
clk => present_counter[4].CLK
clk => present_counter[5].CLK
clk => present_counter[6].CLK
clk => present_counter[7].CLK
clk => present_counter[8].CLK
clk => present_counter[9].CLK
clk => present_counter[10].CLK
clk => present_counter[11].CLK
clk => present_counter[12].CLK
clk => present_counter[13].CLK
clk => present_counter[14].CLK
clk => present_counter[15].CLK
clk => present_counter[16].CLK
clk => present_counter[17].CLK
clk => present_counter[18].CLK
clk => present_counter[19].CLK
clk => present_counter[20].CLK
clk => present_counter[21].CLK
clk => present_counter[22].CLK
clk => present_counter[23].CLK
clk => present_counter[24].CLK
clk => present_counter[25].CLK
clk => present_counter[26].CLK
clk => present_counter[27].CLK
clk => present_counter[28].CLK
clk => present_counter[29].CLK
clk => present_counter[30].CLK
clk => present_counter[31].CLK
clk => present_state[0].CLK
clk => present_state[1].CLK
clk => present_state[2].CLK
clk => present_state[3].CLK
clk => present_state[4].CLK
clk => present_state[5].CLK
clk => present_state[6].CLK
clk => present_state[7].CLK
clk => present_state[8].CLK
clk => present_state[9].CLK
clk => present_state[10].CLK
clk => present_state[11].CLK
clk => present_state[12].CLK
clk => present_state[13].CLK
clk => present_state[14].CLK
clk => present_state[15].CLK
clk => present_state[16].CLK
clk => present_state[17].CLK
clk => present_state[18].CLK
clk => present_state[19].CLK
clk => present_state[20].CLK
clk => present_state[21].CLK
clk => present_state[22].CLK
clk => present_state[23].CLK
clk => present_state[24].CLK
clk => present_state[25].CLK
clk => present_state[26].CLK
clk => present_state[27].CLK
clk => present_state[28].CLK
clk => present_state[29].CLK
clk => present_state[30].CLK
clk => present_state[31].CLK
resetN => present_counter[0].ACLR
resetN => present_counter[1].ACLR
resetN => present_counter[2].ACLR
resetN => present_counter[3].ACLR
resetN => present_counter[4].ACLR
resetN => present_counter[5].ACLR
resetN => present_counter[6].ACLR
resetN => present_counter[7].ACLR
resetN => present_counter[8].ACLR
resetN => present_counter[9].ACLR
resetN => present_counter[10].ACLR
resetN => present_counter[11].ACLR
resetN => present_counter[12].ACLR
resetN => present_counter[13].ACLR
resetN => present_counter[14].ACLR
resetN => present_counter[15].ACLR
resetN => present_counter[16].ACLR
resetN => present_counter[17].ACLR
resetN => present_counter[18].ACLR
resetN => present_counter[19].ACLR
resetN => present_counter[20].ACLR
resetN => present_counter[21].ACLR
resetN => present_counter[22].ACLR
resetN => present_counter[23].ACLR
resetN => present_counter[24].ACLR
resetN => present_counter[25].ACLR
resetN => present_counter[26].ACLR
resetN => present_counter[27].ACLR
resetN => present_counter[28].ACLR
resetN => present_counter[29].ACLR
resetN => present_counter[30].ACLR
resetN => present_counter[31].ACLR
resetN => present_state[0].ACLR
resetN => present_state[1].ACLR
resetN => present_state[2].ACLR
resetN => present_state[3].ACLR
resetN => present_state[4].ACLR
resetN => present_state[5].ACLR
resetN => present_state[6].ACLR
resetN => present_state[7].ACLR
resetN => present_state[8].ACLR
resetN => present_state[9].ACLR
resetN => present_state[10].ACLR
resetN => present_state[11].ACLR
resetN => present_state[12].ACLR
resetN => present_state[13].ACLR
resetN => present_state[14].ACLR
resetN => present_state[15].ACLR
resetN => present_state[16].ACLR
resetN => present_state[17].ACLR
resetN => present_state[18].ACLR
resetN => present_state[19].ACLR
resetN => present_state[20].ACLR
resetN => present_state[21].ACLR
resetN => present_state[22].ACLR
resetN => present_state[23].ACLR
resetN => present_state[24].ACLR
resetN => present_state[25].ACLR
resetN => present_state[26].ACLR
resetN => present_state[27].ACLR
resetN => present_state[28].ACLR
resetN => present_state[29].ACLR
resetN => present_state[30].ACLR
resetN => present_state[31].ACLR
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_counter.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
StartN => next_state.OUTPUTSELECT
outSec[0] <= outSec[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
outSec[1] <= outSec[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
outSec[2] <= outSec[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
outSec[3] <= outSec[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
outSec[4] <= outSec[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
outSec[5] <= outSec[5]$latch.DB_MAX_OUTPUT_PORT_TYPE
outMin[0] <= outMin[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
outMin[1] <= outMin[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
outMin[2] <= outMin[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
outMin[3] <= outMin[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
outMin[4] <= outMin[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
outMin[5] <= outMin[5]$latch.DB_MAX_OUTPUT_PORT_TYPE
outHour[0] <= outHour[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
outHour[1] <= outHour[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
outHour[2] <= outHour[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
outHour[3] <= outHour[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
outHour[4] <= outHour[4]$latch.DB_MAX_OUTPUT_PORT_TYPE


|DE10_LITE_Golden_Top|HEXDRV:HEXDRV0
switch[0] => Decoder0.IN3
switch[1] => Decoder0.IN2
switch[2] => Decoder0.IN1
switch[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
segments[7] <= <VCC>


|DE10_LITE_Golden_Top|HEXDRV:HEXDRV1
switch[0] => Decoder0.IN3
switch[1] => Decoder0.IN2
switch[2] => Decoder0.IN1
switch[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
segments[7] <= <VCC>


|DE10_LITE_Golden_Top|HEXDRV:HEXDRV2
switch[0] => Decoder0.IN3
switch[1] => Decoder0.IN2
switch[2] => Decoder0.IN1
switch[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
segments[7] <= <VCC>


|DE10_LITE_Golden_Top|HEXDRV:HEXDRV3
switch[0] => Decoder0.IN3
switch[1] => Decoder0.IN2
switch[2] => Decoder0.IN1
switch[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
segments[7] <= <VCC>


|DE10_LITE_Golden_Top|HEXDRV:HEXDRV4
switch[0] => Decoder0.IN3
switch[1] => Decoder0.IN2
switch[2] => Decoder0.IN1
switch[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
segments[7] <= <VCC>


|DE10_LITE_Golden_Top|HEXDRV:HEXDRV5
switch[0] => Decoder0.IN3
switch[1] => Decoder0.IN2
switch[2] => Decoder0.IN1
switch[3] => Decoder0.IN0
segments[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
segments[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
segments[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
segments[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
segments[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
segments[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
segments[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
segments[7] <= <VCC>


